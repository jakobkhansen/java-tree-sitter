plugins {
    id "java-library"
    id "maven-publish"
    id "com.jfrog.bintray" version "1.8.5"
    id "application"
}

group = "ai.serenade"
version = "1.1.1"

repositories {
    mavenLocal()
    mavenCentral()
}

task buildSharedObject {
    inputs.file "lib/ai_serenade_treesitter_Languages.cc"
    inputs.file "lib/ai_serenade_treesitter_Languages.h"
    inputs.file "lib/ai_serenade_treesitter_TreeSitter.cc"
    inputs.file "lib/ai_serenade_treesitter_TreeSitter.h"
    outputs.file "libjava-tree-sitter.so"

    doLast {
        exec {
            commandLine 'git', 'submodule', 'update', '--init', '--recursive'
        }
        // exec {
        //     commandLine "./build.py", "-o", "libjava-tree-sitter", "grammars/tree-sitter-java"
        // }
    }
}

clean {
    delete "libjava-tree-sitter.so"
}

compileJava {
    options.compilerArgs += ["-h", "${project.projectDir.toString()}/lib"]
}

compileTestJava {
    dependsOn buildSharedObject
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter:5.6.2"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_KEY")
    publications = ['maven']
    pkg {
        repo = "maven"
        name = "java-tree-sitter"
        userOrg = "serenadeai"
        licenses = ["MIT"]
        vcsUrl = "https://github.com/serenadeai/java-tree-sitter"
        version {
            name = project.getVersion()
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standard_out"
    }

    environment "JAVA_TREE_SITTER", "${project.projectDir.toString()}/libparser.so"
}

task buildtestparser {
    doLast {
        exec {
            commandLine "make", "test"
        }
    }
}

tasks.test.dependsOn("buildtestparser")

ext {
   javaMainClass = "ai.serenade.treesitter.App"
}

application {
    mainClassName = javaMainClass
}
